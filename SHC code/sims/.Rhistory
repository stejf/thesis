## dim = 1000
## #################################################################
base <- 21075
d <- 1000
} else {
stop("invalid ipart")
}
shape <- "-"
k <- 2
dfs <- c(-1, 3, 6)
nis <- c(50, 100, 200)
deltas <- seq(2, 10, by=2)
idelta <- ((ipart - base - 1) %% 5) + 1
idf <- (floor((ipart - base - 1) / 5) %% 3) + 1
ini <- ceiling((ipart - base) / (5*3))
delta <- deltas[idelta]
df <- dfs[idf]
ni <- nis[ini]
m1 <- c(-delta/2, rep(0, d-1))
m2 <- c( delta/2, rep(0, d-1))
mui <- rbind(m1, m2)
vsd <- rep(1, d)
}
## #########################################################################
## simulation settings for K=2 [line + uneven proportions]
## #########################################################################
if (ipart %in% 22000:22999) {
if (ipart %in% 22001:22020) {
## #################################################################
## dim = 10
## #################################################################
base <- 22000
d <- 10
} else if (ipart %in% 22021:22040) {
## #################################################################
## dim = 100
## #################################################################
base <- 22020
d <- 100
} else if (ipart %in% 22041:22060) {
## #################################################################
## dim = 1000
## #################################################################
base <- 22040
d <- 1000
} else {
stop("invalid ipart")
}
shape <- "-"
k <- 2
nis <- list(list(50, c(1/4, 3/4)), list(50, c(1/3, 2/3)),
list(100, c(1/4, 3/4)), list(100, c(1/3, 2/3)))
deltas <- seq(2, 10, by=2)
idelta <- ((ipart - base - 1) %% 5) + 1
ini <- ceiling((ipart - base) / 5)
delta <- deltas[idelta]
df <- -1
ni <- nis[[ini]]
m1 <- c(-delta/2, rep(0, d-1))
m2 <- c( delta/2, rep(0, d-1))
mui <- rbind(m1, m2)
vsd <- rep(1, d)
}
## #########################################################################
## K=3 simulation settings [line]
## #########################################################################
if (ipart %in% 31000:31999) {
if (ipart %in% 31001:31030) {
## #################################################################
## dim = 10
## #################################################################
base <- 31000
d <- 10
} else if (ipart %in% 31031:31060) {
## #################################################################
## dim = 100
## #################################################################
base <- 31030
d <- 100
} else if (ipart %in% 31061:31090) {
## #################################################################
## dim = 1000
## #################################################################
base <- 31060
d <- 1000
}
## parameter settings shared across this set of simulations
shape <- "line"
k <- 3
dfs <- c(-1, 3, 6)
nis <- c(50, 100)
deltas <- seq(2, 10, by=2)
if (d > 100) { deltas <- 2*deltas }
## parse parameter indices by ipart sim index
idelta <- ((ipart - base - 1) %% 5) + 1
idf <- (floor((ipart - base - 1) / 5) %% 3) + 1
ini <- ceiling((ipart - base) / (5*3))
## determine simulation parameters
delta <- deltas[idelta]
df <- dfs[idf]
ni <- nis[ini]
m1 <- c(-delta, rep(0, d-1))
m2 <- rep(0, d)
m3 <- c( delta, rep(0, d-1))
mui <- rbind(m1, m2, m3)
vsd <- rep(1, d)
}
## #########################################################################
## K=3 simulation settings [triangle + jitter]
## #########################################################################
if (ipart %in% 32000:32999) {
if (ipart %in% 32001:32030) {
## #################################################################
## dim = 10
## #################################################################
base <- 32000
d <- 10
} else if (ipart %in% 32031:32060) {
## #################################################################
## dim = 100
## #################################################################
base <- 32030
d <- 100
} else if (ipart %in% 32061:32090) {
## #################################################################
## dim = 1000
## #################################################################
base <- 32060
d <- 1000
}
## parameter settings shared across this set of simulations
shape <- "trianglejitter"
k <- 3
dfs <- c(-1, 3, 6)
nis <- c(50, 100)
deltas <- seq(2, 10, by=2)
if (d > 100) { deltas <- 2*deltas }
## parse parameter indices by ipart sim index
idelta <- ((ipart - base - 1) %% 5) + 1
idf <- (floor((ipart - base - 1) / 5) %% 3) + 1
ini <- ceiling((ipart - base) / (5*3))
## determine simulation parameters
delta <- deltas[idelta]
df <- dfs[idf]
ni <- nis[ini]
## place cluster centers at random jitter from clean "distance" specifications
m1 <- c(-delta/2, -delta*sqrt(3)/4, rep(0, d-2))
m2 <- c(      0,  delta*sqrt(3)/4, rep(0, d-2))
m3 <- c( delta/2, -delta*sqrt(3)/4, rep(0, d-2))
mui <- rbind(m1, m2, m3) + c(rnorm(k*2, mean=0, sd=delta/4), rep(0, k*(d-2)))
vsd <- rep(1, d)
}
## #########################################################################
## K=3 simulation settings [triangle + jitter + uneven proportions]
## #########################################################################
if (ipart %in% 33000:33999) {
if (ipart %in% 33001:33020) {
## #################################################################
## dim = 10
## #################################################################
base <- 33000
d <- 10
} else if (ipart %in% 33021:33040) {
## #################################################################
## dim = 100
## #################################################################
base <- 33020
d <- 100
} else if (ipart %in% 33041:33060) {
## #################################################################
## dim = 1000
## #################################################################
base <- 33040
d <- 1000
}
## parameter settings shared across this set of simulations
shape <- "trianglejitteruneven"
k <- 3
nis <- list(list(50, c(.2,.4,.4)), list(50, c(.2,.2,.6)),
list(100, c(.2,.4,.4)), list(100, c(.2,.2,.6)))
deltas <- seq(2, 10, by=2)
if (d > 100) { deltas <- 2*deltas }
## parse parameter indices by ipart sim index
idelta <- ((ipart - base - 1) %% 5) + 1
ini <- ceiling((ipart - base) / 5)
## determine simulation parameters
delta <- deltas[idelta]
df <- -1
ni <- nis[[ini]]
## place cluster centers at random jitter from clean "distance" specifications
m1 <- c(-delta/2, -delta*sqrt(3)/4, rep(0, d-2))
m2 <- c(      0,  delta*sqrt(3)/4, rep(0, d-2))
m3 <- c( delta/2, -delta*sqrt(3)/4, rep(0, d-2))
mui <- rbind(m1, m2, m3) + c(rnorm(k*2, mean=0, sd=delta/4), rep(0, k*(d-2)))
vsd <- rep(1, d)
}
## #########################################################################
## K=4 simulation settings [tetrahedron + jitter]
## #########################################################################
if (ipart %in% 41000:41999) {
if (ipart %in% 41001:41030) {
## #################################################################
## dim = 10
## #################################################################
base <- 41000
d <- 10
} else if (ipart %in% 41031:41060) {
## #################################################################
## dim = 100
## #################################################################
base <- 41030
d <- 100
} else if (ipart %in% 41061:41090) {
## #################################################################
## dim = 1000
## #################################################################
base <- 41060
d <- 1000
}
## parameter settings shared across this set of simulations
shape <- "tetrajitter"
k <- 4
dfs <- c(-1, 3, 6)
nis <- c(50, 100)
deltas <- seq(2, 10, by=2)
if (d > 100) { deltas <- 2*deltas }
## parse parameter indices by ipart sim index
idelta <- ((ipart - base - 1) %% 5) + 1
idf <- (floor((ipart - base - 1) / 5) %% 3) + 1
ini <- ceiling((ipart - base) / (5*3))
## determine simulation parameters
delta <- deltas[idelta]
df <- dfs[idf]
ni <- nis[ini]
## place cluster centers at random jitter from clean "distance" specifications
m1 <- c(-delta/2,       0, -delta/sqrt(8), rep(0, d-3))
m2 <- c( delta/2,       0, -delta/sqrt(8), rep(0, d-3))
m3 <- c(      0, -delta/2,  delta/sqrt(8), rep(0, d-3))
m4 <- c(      0,  delta/2,  delta/sqrt(8), rep(0, d-3))
mui <- rbind(m1, m2, m3, m4) + c(rnorm(k*3, mean=0, sd=delta/4), rep(0, k*(d-3)))
vsd <- rep(1, d)
}
## #########################################################################
## K=5 simulation settings [random in K-1 dim sphere]
## #########################################################################
if (ipart %in% 51000:51999) {
k <- 5
shape <- "random shell"
ni <- 50
base <- 51000
if (ipart %in% 51001:51015) {
d <- 10
deltas <- seq(4, 20, by=4)
} else if (ipart %in% 51016:51030) {
d <- 100
deltas <- seq(4, 20, by=4)
} else if (ipart %in% 51031:51045) {
d <- 1000
deltas <- seq(5, 25, by=5)
}
if (((ipart-base-1) %% 15) %in% 0:4) {
df <- -1
} else if (((ipart-base-1) %% 15) %in% 5:9) {
df <- 3
} else if (((ipart-base-1) %% 15) %in% 10:14) {
df <- 6
}
delta <- deltas[((ipart-base-1) %% 5) + 1]
## place clusters uniform random in k-1 dim sphere w/ radius delta
mui <-cbind(matrix(rnorm(k*(k-1)), ncol=k, nrow=k-1))
mui <- scale(mui, center=FALSE) %*% diag(runif(k)^(1/(k-1))) / sqrt(k-2)
mui <- cbind(t(mui) * delta, matrix(0, nrow=k, ncol=d-k+1))
vsd <- rep(1, d)
}
## #########################################################################
## K=6 simulation settings [random in K-1 dim sphere]
## #########################################################################
if (ipart %in% 61000:61999) {
k <- 6
shape <- "random shell"
ni <- 50
base <- 61000
if (ipart %in% 61001:61015) {
d <- 10
deltas <- seq(4, 20, by=4)
} else if (ipart %in% 61016:61030) {
d <- 100
deltas <- seq(4, 20, by=4)
} else if (ipart %in% 61031:61045) {
d <- 1000
deltas <- seq(5, 25, by=5)
}
if (((ipart-base-1) %% 15) %in% 0:4) {
df <- -1
} else if (((ipart-base-1) %% 15) %in% 5:9) {
df <- 3
} else if (((ipart-base-1) %% 15) %in% 10:14) {
df <- 6
}
delta <- deltas[((ipart-base-1) %% 5) + 1]
## place clusters uniform random in k-1 dim sphere w/ radius delta
mui <-cbind(matrix(rnorm(k*(k-1)), ncol=k, nrow=k-1))
mui <- scale(mui, center=FALSE) %*% diag(runif(k)^(1/(k-1))) / sqrt(k-2)
mui <- cbind(t(mui) * delta, matrix(0, nrow=k, ncol=d-k+1))
vsd <- rep(1, d)
}
## #########################################################################
## K=7 simulation settings [random in K-1 dim sphere]
## #########################################################################
if (ipart %in% 71000:71999) {
k <- 7
shape <- "random shell"
ni <- 50
base <- 71000
if (ipart %in% 71001:71015) {
d <- 10
deltas <- seq(4, 20, by=4)
} else if (ipart %in% 71016:71030) {
d <- 100
deltas <- seq(4, 20, by=4)
} else if (ipart %in% 71031:71045) {
d <- 1000
deltas <- seq(5, 25, by=5)
}
if (((ipart-base-1) %% 15) %in% 0:4) {
df <- -1
} else if (((ipart-base-1) %% 15) %in% 5:9) {
df <- 3
} else if (((ipart-base-1) %% 15) %in% 10:14) {
df <- 6
}
delta <- deltas[((ipart-base-1) %% 5) + 1]
## place clusters uniform random in k-1 dim sphere w/ radius delta
mui <-cbind(matrix(rnorm(k*(k-1)), ncol=k, nrow=k-1))
mui <- scale(mui, center=FALSE) %*% diag(runif(k)^(1/(k-1))) / sqrt(k-2)
mui <- cbind(t(mui) * delta, matrix(0, nrow=k, ncol=d-k+1))
vsd <- rep(1, d)
}
## #########################################################################
## K=8 simulation settings [random in K-1 dim sphere]
## #########################################################################
if (ipart %in% 81000:81999) {
k <- 8
shape <- "random shell"
ni <- 50
base <- 81000
if (ipart %in% 81001:81015) {
d <- 10
deltas <- seq(4, 20, by=4)
} else if (ipart %in% 81016:81030) {
d <- 100
deltas <- seq(4, 20, by=4)
} else if (ipart %in% 81031:81045) {
d <- 1000
deltas <- seq(5, 25, by=5)
}
if (((ipart-base-1) %% 15) %in% 0:4) {
df <- -1
} else if (((ipart-base-1) %% 15) %in% 5:9) {
df <- 3
} else if (((ipart-base-1) %% 15) %in% 10:14) {
df <- 6
}
delta <- deltas[((ipart-base-1) %% 5) + 1]
## place clusters uniform random in k-1 dim sphere w/ radius delta
mui <-cbind(matrix(rnorm(k*(k-1)), ncol=k, nrow=k-1))
mui <- scale(mui, center=FALSE) %*% diag(runif(k)^(1/(k-1))) / sqrt(k-2)
mui <- cbind(t(mui) * delta, matrix(0, nrow=k, ncol=d-k+1))
vsd <- rep(1, d)
}
## return results
if (params) {
output <- list(k=k, ni=ni, d=d, delta=delta, shape=shape,
mui=mui, vsd=vsd, df=df)
} else {
output <- shc_simulator(k=k, d=d, ni=ni, mui=mui, vsd=vsd, df=df)
}
output
n_reps
## simulate data as (d x n) matrix
output <- shc_settings(ipart)
data <- output$data
dim(data)
length(ni)
ni[[1]]
help(rmultinom)
ni[[1]]*k
k
ni[[1]]
ni[[2]]
rmultinom(1, ni[[1]]*k, ni[[2]])
rmultinom(1, ni[[1]]*k, ni[[2]])
rmultinom(1, ni[[1]]*k, ni[[2]])
rmultinom(1, ni[[1]]*k, ni[[2]])
rmultinom(1, ni[[1]]*k, ni[[2]])
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
ni[[1]]*k
as.numeric(table(sample(1:k, ni[[1]]*k, replace=TRUE)))
#' @param df integer specifying the degrees of freedom for each mixture
#'        t-distribution, with NULL corresponding to a Gaussian
#'        distribution (default = NULL)
#'
#' @return
#' a list containing \code{data} and \code{labels}. The data matrix is of
#' dimension (d x n), and the labels are a length n vector of integers, where
#' n is \code{k*ni} or \code{\sum(ni)}.
#'
#' @author Patrick Kimes
shc_simulator <- function(k, d, ni, mui, vsd, df = NULL) {
## parse cluster size input
if (length(ni) == 1) {
## randomly sample from ni*k
nVec <- as.numeric(table(sample(1:k, ni[[1]]*k, replace=TRUE)))
} else if (length(ni) == 2) {
nVec <- rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
} else {
stop("ni must be length 1 or 2")
}
## create mean matrix and label vector
muMat <- c()
labels <- c()
for (ki in 1:k) {
muMat <- cbind(muMat, replicate(nVec[ki], mui[ki,]))
labels <- c(labels, rep(ki, nVec[ki]))
}
## simulate from t-distribution if dof specified else Gaussian
if (df < 0) {
data <- muMat + (diag(vsd) %*% matrix(rnorm(d*sum(nVec)), d, sum(nVec)))
} else {
data <- muMat + (diag(vsd) %*% matrix(rt(d*sum(nVec), df), d, sum(nVec)))
}
## return results as a list
list(data=data, labels=labels)
}
## create mean matrix and label vector
muMat <- c()
labels <- c()
ki=1
nVec[ki]
nVec <- rmultinom(1, ni[[1]]*k, ni[[2]])[, 1]
nVec[ki]
mui[ki,]
mui
replicate(nVec[ki], mui[ki,])
help(replicate)
replicate(1, 2)
replicate(nVec[ki], mui[ki,])
dim(replicate(nVec[ki], mui[ki,]))
for (ki in 1:k) {
muMat <- cbind(muMat, replicate(nVec[ki], mui[ki,]))
labels <- c(labels, rep(ki, nVec[ki]))
}
dim(muMat)
ki=2
replicate(nVec[ki], mui[ki,])
m1
m2
labels
nVec[ki])
ki
nVec[ki]
ki
replicate(2, 4)
rep(4, 2)
muMat
vsd
diag(vsd)
rnorm(d*sum(nVec))
dim(muMat)
matrix(rnorm(d*sum(nVec)), d, sum(nVec))
dim(matrix(rnorm(d*sum(nVec)), d, sum(nVec)))
nVec
dim(rnorm(d*sum(nVec)))
length(rnorm(d*sum(nVec)))
V = c(1, 1, 1)
V
length(vsd)
diag(V)
diag(V) %*% matrix(rnorm(3*3), 3, 3)
matrix(rnorm(3*3), 3, 3)
set.seed(1)
matrix(rnorm(3*3), 3, 3)
set.seed(1)
diag(V) %*% matrix(rnorm(3*3), 3, 3)
V= c(1000, 1, 1)
diag(V) %*% matrix(rnorm(3*3), 3, 3)
